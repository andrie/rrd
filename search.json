[{"path":"https://andrie.github.io/rrd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Plamen Dimitrov Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrie.github.io/rrd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrie de Vries. Maintainer, copyright holder. Plamen Dimitrov. Author, copyright holder. Tobias Oettiker. Copyright holder.            rrdtool rrd library, https://oss.oetiker.ch/rrdtool/","code":""},{"path":"https://andrie.github.io/rrd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dimitrov P (2022). rrd: Import Data RRD (Round Robin Database) File. https://github.com/andrie/rrd/, https://andrie.github.io/rrd/.","code":"@Manual{,   title = {rrd: Import Data from a RRD (Round Robin Database) File},   author = {Plamen Dimitrov},   year = {2022},   note = {https://github.com/andrie/rrd/, https://andrie.github.io/rrd/}, }"},{"path":"https://andrie.github.io/rrd/index.html","id":"rrd-","dir":"","previous_headings":"","what":"Import Data from a RRD (Round Robin Database) File","title":"Import Data from a RRD (Round Robin Database) File","text":"rrd package allows read data RRD Round Robin Database.","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/index.html","id":"system-requirements","dir":"","previous_headings":"Installation","what":"System requirements","title":"Import Data from a RRD (Round Robin Database) File","text":"order build package source need librrd. Installing RRDtool package manager usually also install library. Note: OSX may update xcode, using xcode-select --install.","code":""},{"path":"https://andrie.github.io/rrd/index.html","id":"package-installation","dir":"","previous_headings":"Installation","what":"Package installation","title":"Import Data from a RRD (Round Robin Database) File","text":"can install stable version package CRAN: development version GitHub:","code":"install.packages(\"rrd\") # install.packages(\"remotes\") remotes::install_github(\"andrie/rrd\")"},{"path":"https://andrie.github.io/rrd/index.html","id":"about-rrd-and-rrdtool-","dir":"","previous_headings":"","what":"About RRD and RRDtool","title":"Import Data from a RRD (Round Robin Database) File","text":"rrd package wrapper around RRDtool. Internally uses librrd import binary data directly R without exporting intermediate format first. introduction RRD database, see https://oss.oetiker.ch/rrdtool/tut/rrd-beginners.en.html","code":""},{"path":"https://andrie.github.io/rrd/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Import Data from a RRD (Round Robin Database) File","text":"package contains example RRD files originated instance RStudio Connect. example, analyse CPU data file cpu-0.rrd. Load package assign location cpu-0.rrd file variable: describe contents RRD file, use describe_rrd(): read entire RRD file, .e. RRA archives, use read_rrd(). returns list tibble objects: Since resulting object list tibbles, can easily work individual data frames: read single RRA archive RRD file, use read_rra(). use function, must specify several arguments define specific data retrieve. includes consolidation function (e.g. “AVERAGE”) time step (e.g. 60), end time. must also specifiy either start time, number steps, n_steps. example, extract average 1 minute periods (step = 60), one entire day (n_steps = 24 * 60): can easily plot using favourite packages:","code":"library(rrd) rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\") describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows) cpu <- read_rrd(rrd_cpu_0)  str(cpu, max.level = 1) #> List of 10 #>  $ AVERAGE60   : tibble [43,199 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE300  : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN300      : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX300      : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE3600 : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN3600     : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX3600     : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE86400: tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN86400    : tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX86400    : tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) names(cpu) #>  [1] \"AVERAGE60\"    \"AVERAGE300\"   \"MIN300\"       \"MAX300\"       \"AVERAGE3600\"  #>  [6] \"MIN3600\"      \"MAX3600\"      \"AVERAGE86400\" \"MIN86400\"     \"MAX86400\"  cpu[[1]] #> # A tibble: 43,199 × 9 #>    timestamp              user     sys  nice  idle  wait   irq softirq   stolen #>    <dttm>                <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #>  1 2018-04-02 12:24:00 0.0104  0.00811     0 0.981     0     0       0 0.000137 #>  2 2018-04-02 12:25:00 0.0126  0.00630     0 0.979     0     0       0 0.00192  #>  3 2018-04-02 12:26:00 0.0159  0.00808     0 0.976     0     0       0 0        #>  4 2018-04-02 12:27:00 0.00853 0.00647     0 0.985     0     0       0 0        #>  5 2018-04-02 12:28:00 0.0122  0.00999     0 0.978     0     0       0 0        #>  6 2018-04-02 12:29:00 0.0106  0.00604     0 0.983     0     0       0 0        #>  7 2018-04-02 12:30:00 0.0147  0.00427     0 0.981     0     0       0 0.000137 #>  8 2018-04-02 12:31:00 0.0193  0.00767     0 0.971     0     0       0 0.00191  #>  9 2018-04-02 12:32:00 0.0300  0.0274      0 0.943     0     0       0 0        #> 10 2018-04-02 12:33:00 0.0162  0.00617     0 0.978     0     0       0 0.000137 #> # … with 43,189 more rows  tail(cpu$AVERAGE60$sys) #> [1] 0.0014390667 0.0020080000 0.0005689333 0.0000000000 0.0014390667 #> [6] 0.0005689333 end_time <- as.POSIXct(\"2018-05-02\") # timestamp with data in example avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60, n_steps = 24 * 60,                      end = end_time)  avg_60 #> # A tibble: 1,440 × 9 #>    timestamp              user     sys  nice  idle    wait   irq softirq  stolen #>    <dttm>                <dbl>   <dbl> <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl> #>  1 2018-05-01 00:01:00 0.00458 2.01e-3     0 0.992 0           0       0 1.44e-3 #>  2 2018-05-01 00:02:00 0.00258 5.70e-4     0 0.996 0           0       0 5.70e-4 #>  3 2018-05-01 00:03:00 0.00633 1.44e-3     0 0.992 0           0       0 0       #>  4 2018-05-01 00:04:00 0.00515 2.01e-3     0 0.991 0           0       0 1.44e-3 #>  5 2018-05-01 00:05:00 0.00402 5.69e-4     0 0.995 0           0       0 5.69e-4 #>  6 2018-05-01 00:06:00 0.00689 1.44e-3     0 0.992 0           0       0 0       #>  7 2018-05-01 00:07:00 0.00371 2.01e-3     0 0.993 1.44e-3     0       0 0       #>  8 2018-05-01 00:08:00 0.00488 2.01e-3     0 0.993 5.69e-4     0       0 0       #>  9 2018-05-01 00:09:00 0.00748 5.68e-4     0 0.992 0           0       0 0       #> 10 2018-05-01 00:10:00 0.00516 0           0 0.995 0           0       0 0       #> # … with 1,430 more rows library(ggplot2) ggplot(avg_60, aes(x = timestamp, y = user)) +    geom_line() +   stat_smooth(method = \"loess\", span = 0.125, se = FALSE) +   ggtitle(\"CPU0 usage, data read from RRD file\") #> `geom_smooth()` using formula 'y ~ x'"},{"path":"https://andrie.github.io/rrd/index.html","id":"more-information","dir":"","previous_headings":"","what":"More information","title":"Import Data from a RRD (Round Robin Database) File","text":"information rrdtool rrd format please refer official rrdtool documentation tutorials. can also read -depth description package R Views blog post Reading analysing log files RRD database format.","code":""},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes content of a RRD file. — describe_rrd","title":"Describes content of a RRD file. — describe_rrd","text":"Describes content RRD file.","code":""},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes content of a RRD file. — describe_rrd","text":"","code":"describe_rrd(filename)"},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes content of a RRD file. — describe_rrd","text":"filename File name","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describes content of a RRD file. — describe_rrd","text":"","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows)"},{"path":"https://andrie.github.io/rrd/reference/importRRD.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions. — importRRD","title":"Deprecated functions. — importRRD","text":"Deprecated functions. Deprecated functions.","code":""},{"path":"https://andrie.github.io/rrd/reference/importRRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions. — importRRD","text":"","code":"importRRD(filename, cf = NULL, start = NULL, end = NULL, step = NULL)  importRRD(filename, cf = NULL, start = NULL, end = NULL, step = NULL)"},{"path":"https://andrie.github.io/rrd/reference/importRRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions. — importRRD","text":"filename File name cf consolidation function applied data want fetch. Must one c(\"AVERAGE\", \"MIN\", \"MAX\", \"LAST\") start start time end end time, defaults current system time step step","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports the RRA data from an RRD database — read_rra","title":"Imports the RRA data from an RRD database — read_rra","text":"Finds RRA (round robin array) best matches consolidation function step imports values (data stores) RRA timestamp start end. Note start included result. Returns data.frame object timestamp data stores columns. data store names retrieved RRD file set corresponding column names. timestamps also used row names.","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports the RRA data from an RRD database — read_rra","text":"","code":"read_rra(filename, cf, step, n_steps, start, end = Sys.time())"},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports the RRA data from an RRD database — read_rra","text":"filename File name cf consolidation function applied data want fetch. Must one c(\"AVERAGE\", \"MIN\", \"MAX\", \"LAST\") step step n_steps number steps return start start time end end time, defaults current system time","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imports the RRA data from an RRD database — read_rra","text":"filename, cf (consolidation function) step arguments uniquely identify RRA array RRD file. arguments start end define time-slice retrieved. Note start included result. Refer documentation rrdfetch information. returned data.frame timestamp data stores separate columns. names data sources extracted RRD file set column names. timestamps also used row names.","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports the RRA data from an RRD database — read_rra","text":"","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  # Note that the default end time is the current time (Sys.time()) # However, since the sample data is historic, specify the end time  start_time <- as.POSIXct(\"2018-05-01\") # timestamp with data in example end_time <- as.POSIXct(\"2018-05-02\")   # timestamp with data in example  # read archive by specifying start time avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60L,                       start = start_time,                       end = end_time) names(avg_60) #> [1] \"timestamp\" \"user\"      \"sys\"       \"nice\"      \"idle\"      \"wait\"      #> [7] \"irq\"       \"softirq\"   \"stolen\"    head(avg_60) #> # A tibble: 6 × 9 #>   timestamp              user      sys  nice  idle  wait   irq softirq   stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #> 1 2018-05-01 00:01:00 0.00458 0.00201      0 0.992     0     0       0 0.00144  #> 2 2018-05-01 00:02:00 0.00258 0.000570     0 0.996     0     0       0 0.000570 #> 3 2018-05-01 00:03:00 0.00633 0.00144      0 0.992     0     0       0 0        #> 4 2018-05-01 00:04:00 0.00515 0.00201      0 0.991     0     0       0 0.00144  #> 5 2018-05-01 00:05:00 0.00402 0.000569     0 0.995     0     0       0 0.000569 #> 6 2018-05-01 00:06:00 0.00689 0.00144      0 0.992     0     0       0 0        tail(avg_60) #> # A tibble: 6 × 9 #>   timestamp              user      sys  nice  idle  wait   irq softirq stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> #> 1 2018-05-01 23:55:00 0.00546 0.00201      0 0.993     0     0       0      0 #> 2 2018-05-01 23:56:00 0.00458 0.00201      0 0.993     0     0       0      0 #> 3 2018-05-01 23:57:00 0.00258 0.000568     0 0.997     0     0       0      0 #> 4 2018-05-01 23:58:00 0.00633 0            0 0.994     0     0       0      0 #> 5 2018-05-01 23:59:00 0.00802 0.00144      0 0.991     0     0       0      0 #> 6 2018-05-02 00:00:00 0.00515 0.00345      0 0.991     0     0       0      0  # read archive by specifying number of rows to retrieve avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60L,                     n_steps = 5,                     end = end_time) names(avg_60) #> [1] \"timestamp\" \"user\"      \"sys\"       \"nice\"      \"idle\"      \"wait\"      #> [7] \"irq\"       \"softirq\"   \"stolen\"    avg_60 #> # A tibble: 5 × 9 #>   timestamp              user      sys  nice  idle  wait   irq softirq stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> #> 1 2018-05-01 23:56:00 0.00458 0.00201      0 0.993     0     0       0      0 #> 2 2018-05-01 23:57:00 0.00258 0.000568     0 0.997     0     0       0      0 #> 3 2018-05-01 23:58:00 0.00633 0            0 0.994     0     0       0      0 #> 4 2018-05-01 23:59:00 0.00802 0.00144      0 0.991     0     0       0      0 #> 5 2018-05-02 00:00:00 0.00515 0.00345      0 0.991     0     0       0      0"},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports data from an RRD database — read_rrd","title":"Imports data from an RRD database — read_rrd","text":"Reads metadata RRD adjusts parameters accordingly order expose RRAs entirety.","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports data from an RRD database — read_rrd","text":"","code":"read_rrd(filename)"},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports data from an RRD database — read_rrd","text":"filename File name","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imports data from an RRD database — read_rrd","text":"Returns named list data.frames. data frame corresponds RRA (see read_rra()).  list names constructed \"consolidation function\" + \"step\" - e.g. \"AVERAGE15\".","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Imports data from an RRD database — read_rrd","text":"https://oss.oetiker.ch/rrdtool/doc/rrdfetch.en.html","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports data from an RRD database — read_rrd","text":"","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows)  cpu <- read_rrd(rrd_cpu_0) names(cpu) #>  [1] \"AVERAGE60\"    \"AVERAGE300\"   \"MIN300\"       \"MAX300\"       \"AVERAGE3600\"  #>  [6] \"MIN3600\"      \"MAX3600\"      \"AVERAGE86400\" \"MIN86400\"     \"MAX86400\"     head(cpu[[1]]) #> # A tibble: 6 × 9 #>   timestamp              user     sys  nice  idle  wait   irq softirq   stolen #>   <dttm>                <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #> 1 2018-04-02 12:24:00 0.0104  0.00811     0 0.981     0     0       0 0.000137 #> 2 2018-04-02 12:25:00 0.0126  0.00630     0 0.979     0     0       0 0.00192  #> 3 2018-04-02 12:26:00 0.0159  0.00808     0 0.976     0     0       0 0        #> 4 2018-04-02 12:27:00 0.00853 0.00647     0 0.985     0     0       0 0        #> 5 2018-04-02 12:28:00 0.0122  0.00999     0 0.978     0     0       0 0        #> 6 2018-04-02 12:29:00 0.0106  0.00604     0 0.983     0     0       0 0        tail(cpu[[1]]) #> # A tibble: 6 × 9 #>   timestamp              user      sys  nice  idle    wait   irq softirq  stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl> #> 1 2018-05-02 12:17:00 0.00545 0.00144      0 0.992 1.44e-3     0       0 0       #> 2 2018-05-02 12:18:00 0.00602 0.00201      0 0.991 5.69e-4     0       0 0       #> 3 2018-05-02 12:19:00 0.00889 0.000569     0 0.991 0           0       0 0       #> 4 2018-05-02 12:20:00 0.00715 0            0 0.991 0           0       0 1.44e-3 #> 5 2018-05-02 12:21:00 0.00602 0.00144      0 0.992 0           0       0 5.68e-4 #> 6 2018-05-02 12:22:00 0.00171 0.000569     0 0.998 0           0       0 0        tail(   cpu$AVERAGE60$sys ) #> [1] 0.0014390667 0.0020080000 0.0005689333 0.0000000000 0.0014390667 #> [6] 0.0005689333"},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Makes easy import data 'RRD' database     (<https://oss.oetiker.ch/rrdtool/>) directly R data structures.     resulting objects 'tibble' objects list 'tibble' objects, making    easy manipulate data.  package uses `librrd` import     numerical data `RRD` database directly R data structures without     using intermediate formats.","code":""},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Exposes following functions: describe_rrd() enumerate archives included RRD file. read_rrd() read entire RRD file, including archives read_rra() extract single RRA (round robin archive) RRD file information RRdtool RRD format please refer official RRDtool documentation tutorials. can also read -depth description package R Views blog post Reading analysing log files RRD database format.","code":""},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"package-history","dir":"Reference","previous_headings":"","what":"Package history","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Plamen Dimitrov wrote original proof concept package Google Summer Code 2014 project wrote accompanying blog post \"R Package Working RRD Files\". Andrie de Vries became maintainer package early 2018, prepared package release CRAN adding documentation, examples unit tests. time API changed resulting objects tibble objects, making easier analyse data using tidyverse concepts.  time also published \"R Views\" blog post.","code":""},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"https://oss.oetiker.ch/rrdtool/doc/index.en.html","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Maintainer: Andrie de Vries apdevries@gmail.com [copyright holder] Authors: Plamen Dimitrov dim.plamen@gmail.com [copyright holder] contributors: Tobias Oettiker (rrdtool rrd library, https://oss.oetiker.ch/rrdtool/) [copyright holder]","code":""}]
