[{"path":"https://andrie.github.io/rrd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Plamen Dimitrov Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"understanding-the-rrd-format-as-an-r-user","dir":"Articles","previous_headings":"","what":"Understanding the RRD format as an R user","title":"Reading and analyzing log files in the RRD database format","text":"name RRD initialism Round Robin Database. “round robin” refers fact database always fixed size, new entry enters database, oldest entry discarded. practical terms, database collects data fixed period time, information older threshold gets removed. Image credit: loriotpro(https://bit.ly/2tk2MFa) second quality RRD databases datum stored different “consolidation data points”, every data point aggregation time. example, data point can represent average value time period, maximum period. Typical consolidation functions include average, min max. third quality every RRD database file typically consists multiple archives. archive measures data different time period. instance, archives can capture data intervals 10 seconds, 30 seconds, 1 minute 5 minutes. example, description RRD file originated RStudio Connect: RRD file contains data properties CPU 0 system. example, first RRA archive contains averaged metrics one minute (60s) intervals, second RRA measures metric, averaged five minutes. metrics also available intervals one hour one day. Notice also every archive different number rows, representing different historical period data kept. example, per minute data AVERAGE_60 retained 43,200 periods (12 days) daily data MAX_86400 retained 1,825 periods (5 years). want know , please read excellent introduction tutorial RRD database.","code":"describe_rrd(\"rrd_cpu_0\") #> A RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows)"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"introducing-the-rrd-package","dir":"Articles","previous_headings":"","what":"Introducing the rrd package","title":"Reading and analyzing log files in the RRD database format","text":"recently, wasn’t easy import RRD files R. pleased discover Google Summer Code 2014 project created proof--concept R package read files. author package Plamen Dimitrov, published code GitHub also wrote explanatory blog post. provide suggestions customers, decided update package, provide example code, generally improve reliability. result yet CRAN, can install development version package github.","code":""},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"installing-the-package","dir":"Articles","previous_headings":"Introducing the rrd package","what":"Installing the package","title":"Reading and analyzing log files in the RRD database format","text":"build package source, first need install librrd. Installing RRDtool Linux package manager usually also install library. Using Ubuntu: Using RHEL / CentOS: system requirements place, can install development version R package GitHub using:","code":"sudo apt-get install rrdtool librrd-dev sudo yum install rrdtool rrdtool-devel # install.packages(\"devtools\") devtools::install_github(\"andrie/rrd\")"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"limitations","dir":"Articles","previous_headings":"Introducing the rrd package","what":"Limitations","title":"Reading and analyzing log files in the RRD database format","text":"package yet available Windows.","code":""},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"using-the-package","dir":"Articles","previous_headings":"Introducing the rrd package","what":"Using the package","title":"Reading and analyzing log files in the RRD database format","text":"’ve installed package, can start use . package contains built-RRD files, able run following code directly.","code":"library(rrd)"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"describing-the-contents-of-a-rrd","dir":"Articles","previous_headings":"Introducing the rrd package > Using the package","what":"Describing the contents of a RRD","title":"Reading and analyzing log files in the RRD database format","text":"describe contents RRD file, use describe_rrd(). function reports information names archive (RRA) file, consolidation function, number observations:","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows)"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"reading-an-entire-rrd-file","dir":"Articles","previous_headings":"Introducing the rrd package > Using the package","what":"Reading an entire RRD file","title":"Reading and analyzing log files in the RRD database format","text":"read entire RRD file, .e. RRA archives, use read_rrd(). returns list tibble objects: Since resulting object list tibble objects, can easily use R functions work individual archive: inspect contents first archive (AVERAGE60), simply print object - since ’s tibble, get 10 lines output. example, CPU metrics contains time stamp metrics average user sys usage, well nice value, idle time, interrupt requests soft interrupt requests: Since data tibble format, can easily extract specific data, e.g., last values system usage:","code":"cpu <- read_rrd(rrd_cpu_0)  str(cpu, max.level = 1) #> List of 10 #>  $ AVERAGE60   : tibble [43,199 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE300  : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN300      : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX300      : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE3600 : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN3600     : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX3600     : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE86400: tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN86400    : tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX86400    : tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) names(cpu) #>  [1] \"AVERAGE60\"    \"AVERAGE300\"   \"MIN300\"       \"MAX300\"       \"AVERAGE3600\"  #>  [6] \"MIN3600\"      \"MAX3600\"      \"AVERAGE86400\" \"MIN86400\"     \"MAX86400\" cpu[[1]] #> # A tibble: 43,199 × 9 #>    timestamp              user     sys  nice  idle  wait   irq softirq   stolen #>    <dttm>                <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #>  1 2018-04-02 12:24:00 0.0104  0.00811     0 0.981     0     0       0 0.000137 #>  2 2018-04-02 12:25:00 0.0126  0.00630     0 0.979     0     0       0 0.00192  #>  3 2018-04-02 12:26:00 0.0159  0.00808     0 0.976     0     0       0 0        #>  4 2018-04-02 12:27:00 0.00853 0.00647     0 0.985     0     0       0 0        #>  5 2018-04-02 12:28:00 0.0122  0.00999     0 0.978     0     0       0 0        #>  6 2018-04-02 12:29:00 0.0106  0.00604     0 0.983     0     0       0 0        #>  7 2018-04-02 12:30:00 0.0147  0.00427     0 0.981     0     0       0 0.000137 #>  8 2018-04-02 12:31:00 0.0193  0.00767     0 0.971     0     0       0 0.00191  #>  9 2018-04-02 12:32:00 0.0300  0.0274      0 0.943     0     0       0 0        #> 10 2018-04-02 12:33:00 0.0162  0.00617     0 0.978     0     0       0 0.000137 #> # … with 43,189 more rows #> # ℹ Use `print(n = ...)` to see more rows tail(cpu$AVERAGE60$sys) #> [1] 0.0014390667 0.0020080000 0.0005689333 0.0000000000 0.0014390667 #> [6] 0.0005689333"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"reading-only-a-single-archive","dir":"Articles","previous_headings":"Introducing the rrd package > Using the package","what":"Reading only a single archive","title":"Reading and analyzing log files in the RRD database format","text":"underlying code rrd package written C, therefore blazingly fast. Reading entire RRD file takes fraction second, sometimes may want extract specific RRA archive immediately. read single RRA archive RRD file, use read_rra(). use function, must specify several arguments define specific data retrieve. includes consolidation function (e.g., \"AVERAGE\") time step (e.g., 60). must also specify either start time number steps, n_steps. example, extract average one-minute periods (step = 60) one day (n_steps = 24 * 60):","code":"end_time <- as.POSIXct(\"2018-05-02\") # timestamp with data in example avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60, n_steps = 24 * 60,                      end = end_time)  avg_60 #> # A tibble: 1,440 × 9 #>    timestamp              user     sys  nice  idle    wait   irq softirq  stolen #>    <dttm>                <dbl>   <dbl> <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl> #>  1 2018-05-01 00:01:00 0.00458 2.01e-3     0 0.992 0           0       0 1.44e-3 #>  2 2018-05-01 00:02:00 0.00258 5.70e-4     0 0.996 0           0       0 5.70e-4 #>  3 2018-05-01 00:03:00 0.00633 1.44e-3     0 0.992 0           0       0 0       #>  4 2018-05-01 00:04:00 0.00515 2.01e-3     0 0.991 0           0       0 1.44e-3 #>  5 2018-05-01 00:05:00 0.00402 5.69e-4     0 0.995 0           0       0 5.69e-4 #>  6 2018-05-01 00:06:00 0.00689 1.44e-3     0 0.992 0           0       0 0       #>  7 2018-05-01 00:07:00 0.00371 2.01e-3     0 0.993 1.44e-3     0       0 0       #>  8 2018-05-01 00:08:00 0.00488 2.01e-3     0 0.993 5.69e-4     0       0 0       #>  9 2018-05-01 00:09:00 0.00748 5.68e-4     0 0.992 0           0       0 0       #> 10 2018-05-01 00:10:00 0.00516 0           0 0.995 0           0       0 0       #> # … with 1,430 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"plotting-the-results","dir":"Articles","previous_headings":"Introducing the rrd package > Using the package","what":"Plotting the results","title":"Reading and analyzing log files in the RRD database format","text":"original RRDTool library Linux contains functions easily plot RRD data, feature distinguishes RRD many databases. However, R already rich plotting capability, rrd R package doesn’t expose specific plotting functions. example, can easily plot data using favourite packages, like ggplot2:","code":"library(ggplot2) ggplot(avg_60, aes(x = timestamp, y = user)) +    geom_line() +   stat_smooth(method = \"loess\", span = 0.125, se = FALSE, formula = y~x) +   ggtitle(\"CPU0 usage, data read from RRD file\")"},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"getting-the-rrd-files-from-rstudio-server-pro-and-rstudio-connect","dir":"Articles","previous_headings":"","what":"Getting the RRD files from RStudio Server Pro and RStudio Connect","title":"Reading and analyzing log files in the RRD database format","text":"mentioned introduction, RStudio Server Pro RStudio Connect use RRD store metrics. fact, metrics used power administration dashboard products. means often easiest solution simply enable admin dashboard view information . RStudio Server Pro admin dashboard However, sometimes R users system administrators need analyze metrics detail, section, discuss can find files analysis. administration guides products explain find metrics files: default, metrics stored /var/lib/rstudio-server/monitor/rrd, although path configurable server administrator RStudio Server Pro stores system metrics well user metrics default path metrics logs /var/lib/rstudio-connect/metrics, though , configurable server administrator. want analyze files, best copy files different location. security permissions products configured way ’s possible read files original folder. Therefore, recommend copy files different location analysis .","code":"rsc <- \"/var/lib/rstudio-connect/metrics/rrd\" rsp <- \"/var/lib/rstudio-server/monitor/rrd\""},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"warning-about-using-the-rstudio-connect-rrd-files","dir":"Articles","previous_headings":"Getting the RRD files from RStudio Server Pro and RStudio Connect","what":"Warning about using the RStudio Connect RRD files:","title":"Reading and analyzing log files in the RRD database format","text":"RStudio Connect team actively planning change way content-level metrics stored, data related shiny apps, markdown reports, etc. likely look different future release. clear: schemas might change RStudio Connect may stop tracking metrics ’s also possible entire mechanism might change guarantees make RStudio Connect around data actually surface: server-wide user counts RAM CPU data means analyze RRD files, aware entire mechanism storing metrics might change future.","code":""},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"additional-caveat","dir":"Articles","previous_headings":"Getting the RRD files from RStudio Server Pro and RStudio Connect","what":"Additional caveat","title":"Reading and analyzing log files in the RRD database format","text":"metrics collection process runs sandboxed environment, possible publish report RStudio Connect reads metrics directly. want automate process read Connect metrics, set cron job copy files different location, run analysis copied files. (Also, re-read warning everything might change!)","code":""},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"example","dir":"Articles","previous_headings":"Getting the RRD files from RStudio Server Pro and RStudio Connect","what":"Example","title":"Reading and analyzing log files in the RRD database format","text":"following worked example, copied rrd files originated RStudio Connect different location disk, stored config file. First, list file names: file names indicated RStudio Connect collects metrics system (CPU, RAM, etc.), well every piece published content. look system load, first describe contents \"system.load.rrd\" file: output tells metrics collected every 60 seconds (one minute), selected multiples (1 minute, 5 minutes, 1 hour 1 day.) can also tell consolidation functions average, min max. extract one month data, averaged 5-minute intervals use step = 300: easy plot using preferred plotting package, e.g., ggplot2:","code":"rrd_location <- system.file(\"extdata\", package = \"rrd\") rrd_location %>%    list.files() #> [1] \"content-1.rrd\" \"cpu-0.rrd\" cpu <- file.path(rrd_location, \"cpu-0.rrd\") describe_rrd(cpu) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows) cpu <- file.path(rrd_location, \"cpu-0.rrd\") dat <- read_rra(cpu, cf = \"AVERAGE\", step = 300L, n_steps = (3600 / 300) * 24 * 30, end = end_time) dat #> # A tibble: 8,640 × 9 #>    timestamp             user     sys  nice  idle     wait   irq softirq  stolen #>    <dttm>               <dbl>   <dbl> <dbl> <dbl>    <dbl> <dbl>   <dbl>   <dbl> #>  1 2018-04-02 00:05:00 0.0162 0.00821     0 0.975 0            0 0       8.22e-4 #>  2 2018-04-02 00:10:00 0.0221 0.00988     0 0.967 0            0 0       8.19e-4 #>  3 2018-04-02 00:15:00 0.0448 0.0186      0 0.934 0.00124      0 4.14e-4 1.24e-3 #>  4 2018-04-02 00:20:00 0.0177 0.00816     0 0.974 0            0 0       0       #>  5 2018-04-02 00:25:00 0.0285 0.00799     0 0.963 0.000411     0 0       4.10e-4 #>  6 2018-04-02 00:30:00 0.140  0.00910     0 0.850 0            0 0       8.47e-4 #>  7 2018-04-02 00:35:00 0.0151 0.0151      0 0.969 0.000351     0 0       3.84e-4 #>  8 2018-04-02 00:40:00 0.0565 0.00942     0 0.929 0.00491      0 0       0       #>  9 2018-04-02 00:45:00 0.0241 0.00835     0 0.967 0            0 0       8.50e-4 #> 10 2018-04-02 00:50:00 0.0251 0.0111      0 0.963 0            0 0       7.95e-4 #> # … with 8,630 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(dat, aes(x = timestamp, y = `user`)) +    geom_line() +    geom_smooth(method = \"loess\", span = 0.05, formula = y ~ x) #> Warning: Removed 1 rows containing non-finite values (stat_smooth)."},{"path":"https://andrie.github.io/rrd/articles/using_rrd.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Reading and analyzing log files in the RRD database format","text":"rrd package, available GitHub, makes easy read metrics stored RRD database format. Reading archive quick, resulting data tibble individual archive, list tibbles entire file. makes easy analyze data using tidyverse packages, plot information.","code":""},{"path":"https://andrie.github.io/rrd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrie de Vries. Maintainer, copyright holder. Plamen Dimitrov. Author, copyright holder. Tobias Oettiker. Copyright holder.            rrdtool rrd library, https://oss.oetiker.ch/rrdtool/","code":""},{"path":"https://andrie.github.io/rrd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dimitrov P (2022). rrd: Import Data RRD (Round Robin Database) File. https://github.com/andrie/rrd/, https://andrie.github.io/rrd/.","code":"@Manual{,   title = {rrd: Import Data from a RRD (Round Robin Database) File},   author = {Plamen Dimitrov},   year = {2022},   note = {https://github.com/andrie/rrd/, https://andrie.github.io/rrd/}, }"},{"path":"https://andrie.github.io/rrd/index.html","id":"rrd-","dir":"","previous_headings":"","what":"Import Data from a RRD (Round Robin Database) File","title":"Import Data from a RRD (Round Robin Database) File","text":"rrd package allows read data RRD Round Robin Database.","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/index.html","id":"system-requirements","dir":"","previous_headings":"Installation","what":"System requirements","title":"Import Data from a RRD (Round Robin Database) File","text":"order build package source need librrd. Installing RRDtool package manager usually also install library. Note: OSX may update xcode, using xcode-select --install.","code":""},{"path":"https://andrie.github.io/rrd/index.html","id":"package-installation","dir":"","previous_headings":"Installation","what":"Package installation","title":"Import Data from a RRD (Round Robin Database) File","text":"can install stable version package CRAN: development version GitHub:","code":"install.packages(\"rrd\") # install.packages(\"remotes\") remotes::install_github(\"andrie/rrd\")"},{"path":"https://andrie.github.io/rrd/index.html","id":"about-rrd-and-rrdtool-","dir":"","previous_headings":"","what":"About RRD and RRDtool","title":"Import Data from a RRD (Round Robin Database) File","text":"rrd package wrapper around RRDtool. Internally uses librrd import binary data directly R without exporting intermediate format first. introduction RRD database, see https://oss.oetiker.ch/rrdtool/tut/rrd-beginners.en.html","code":""},{"path":"https://andrie.github.io/rrd/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Import Data from a RRD (Round Robin Database) File","text":"package contains example RRD files originated instance RStudio Connect. example, analyze CPU data file cpu-0.rrd. Load package assign location cpu-0.rrd file variable: describe contents RRD file, use describe_rrd(): read entire RRD file, .e. RRA archives, use read_rrd(). returns list tibble objects: Since resulting object list tibbles, can easily work individual data frames: read single RRA archive RRD file, use read_rra(). use function, must specify several arguments define specific data retrieve. includes consolidation function (e.g. “AVERAGE”) time step (e.g. 60), end time. must also specifiy either start time, number steps, n_steps. example, extract average 1 minute periods (step = 60), one entire day (n_steps = 24 * 60): can easily plot using favourite packages:","code":"library(rrd) rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\") describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows) cpu <- read_rrd(rrd_cpu_0)  str(cpu, max.level = 1) #> List of 10 #>  $ AVERAGE60   : tibble [43,199 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE300  : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN300      : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX300      : tibble [25,919 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE3600 : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN3600     : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX3600     : tibble [8,759 × 9] (S3: tbl_df/tbl/data.frame) #>  $ AVERAGE86400: tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MIN86400    : tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) #>  $ MAX86400    : tibble [1,824 × 9] (S3: tbl_df/tbl/data.frame) names(cpu) #>  [1] \"AVERAGE60\"    \"AVERAGE300\"   \"MIN300\"       \"MAX300\"       \"AVERAGE3600\"  #>  [6] \"MIN3600\"      \"MAX3600\"      \"AVERAGE86400\" \"MIN86400\"     \"MAX86400\"  cpu[[1]] #> # A tibble: 43,199 × 9 #>    timestamp              user     sys  nice  idle  wait   irq softirq   stolen #>    <dttm>                <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #>  1 2018-04-02 12:24:00 0.0104  0.00811     0 0.981     0     0       0 0.000137 #>  2 2018-04-02 12:25:00 0.0126  0.00630     0 0.979     0     0       0 0.00192  #>  3 2018-04-02 12:26:00 0.0159  0.00808     0 0.976     0     0       0 0        #>  4 2018-04-02 12:27:00 0.00853 0.00647     0 0.985     0     0       0 0        #>  5 2018-04-02 12:28:00 0.0122  0.00999     0 0.978     0     0       0 0        #>  6 2018-04-02 12:29:00 0.0106  0.00604     0 0.983     0     0       0 0        #>  7 2018-04-02 12:30:00 0.0147  0.00427     0 0.981     0     0       0 0.000137 #>  8 2018-04-02 12:31:00 0.0193  0.00767     0 0.971     0     0       0 0.00191  #>  9 2018-04-02 12:32:00 0.0300  0.0274      0 0.943     0     0       0 0        #> 10 2018-04-02 12:33:00 0.0162  0.00617     0 0.978     0     0       0 0.000137 #> # … with 43,189 more rows #> # ℹ Use `print(n = ...)` to see more rows  tail(cpu$AVERAGE60$sys) #> [1] 0.0014390667 0.0020080000 0.0005689333 0.0000000000 0.0014390667 #> [6] 0.0005689333 end_time <- as.POSIXct(\"2018-05-02\") # timestamp with data in example avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60, n_steps = 24 * 60,                      end = end_time)  avg_60 #> # A tibble: 1,440 × 9 #>    timestamp              user     sys  nice  idle    wait   irq softirq  stolen #>    <dttm>                <dbl>   <dbl> <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl> #>  1 2018-05-01 00:01:00 0.00458 2.01e-3     0 0.992 0           0       0 1.44e-3 #>  2 2018-05-01 00:02:00 0.00258 5.70e-4     0 0.996 0           0       0 5.70e-4 #>  3 2018-05-01 00:03:00 0.00633 1.44e-3     0 0.992 0           0       0 0       #>  4 2018-05-01 00:04:00 0.00515 2.01e-3     0 0.991 0           0       0 1.44e-3 #>  5 2018-05-01 00:05:00 0.00402 5.69e-4     0 0.995 0           0       0 5.69e-4 #>  6 2018-05-01 00:06:00 0.00689 1.44e-3     0 0.992 0           0       0 0       #>  7 2018-05-01 00:07:00 0.00371 2.01e-3     0 0.993 1.44e-3     0       0 0       #>  8 2018-05-01 00:08:00 0.00488 2.01e-3     0 0.993 5.69e-4     0       0 0       #>  9 2018-05-01 00:09:00 0.00748 5.68e-4     0 0.992 0           0       0 0       #> 10 2018-05-01 00:10:00 0.00516 0           0 0.995 0           0       0 0       #> # … with 1,430 more rows #> # ℹ Use `print(n = ...)` to see more rows library(ggplot2) ggplot(avg_60, aes(x = timestamp, y = user)) +    geom_line() +   stat_smooth(method = \"loess\", span = 0.125, se = FALSE) +   ggtitle(\"CPU0 usage, data read from RRD file\") #> `geom_smooth()` using formula 'y ~ x'"},{"path":"https://andrie.github.io/rrd/index.html","id":"more-information","dir":"","previous_headings":"","what":"More information","title":"Import Data from a RRD (Round Robin Database) File","text":"information rrdtool rrd format please refer official rrdtool documentation tutorials. can also read -depth description package R Views blog post Reading analyzing log files RRD database format.","code":""},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes content of a RRD file. — describe_rrd","title":"Describes content of a RRD file. — describe_rrd","text":"Describes content RRD file.","code":""},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes content of a RRD file. — describe_rrd","text":"","code":"describe_rrd(filename)"},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes content of a RRD file. — describe_rrd","text":"filename File name","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/describe_rrd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describes content of a RRD file. — describe_rrd","text":"","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows)"},{"path":"https://andrie.github.io/rrd/reference/importRRD.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions. — importRRD","title":"Deprecated functions. — importRRD","text":"Deprecated functions. Deprecated functions.","code":""},{"path":"https://andrie.github.io/rrd/reference/importRRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions. — importRRD","text":"","code":"importRRD(filename, cf = NULL, start = NULL, end = NULL, step = NULL)  importRRD(filename, cf = NULL, start = NULL, end = NULL, step = NULL)"},{"path":"https://andrie.github.io/rrd/reference/importRRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions. — importRRD","text":"filename File name cf consolidation function applied data want fetch. Must one c(\"AVERAGE\", \"MIN\", \"MAX\", \"LAST\") start start time end end time, defaults current system time step step","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports the RRA data from an RRD database — read_rra","title":"Imports the RRA data from an RRD database — read_rra","text":"Finds RRA (round robin array) best matches consolidation function step imports values (data stores) RRA timestamp start end. Note start included result. Returns data.frame object timestamp data stores columns. data store names retrieved RRD file set corresponding column names. timestamps also used row names.","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports the RRA data from an RRD database — read_rra","text":"","code":"read_rra(filename, cf, step, n_steps, start, end = Sys.time())"},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports the RRA data from an RRD database — read_rra","text":"filename File name cf consolidation function applied data want fetch. Must one c(\"AVERAGE\", \"MIN\", \"MAX\", \"LAST\") step step n_steps number steps return start start time end end time, defaults current system time","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imports the RRA data from an RRD database — read_rra","text":"filename, cf (consolidation function) step arguments uniquely identify RRA array RRD file. arguments start end define time-slice retrieved. Note start included result. Refer documentation rrdfetch information. returned data.frame timestamp data stores separate columns. names data sources extracted RRD file set column names. timestamps also used row names.","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/read_rra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports the RRA data from an RRD database — read_rra","text":"","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  # Note that the default end time is the current time (Sys.time()) # However, since the sample data is historic, specify the end time  start_time <- as.POSIXct(\"2018-05-01\") # timestamp with data in example end_time <- as.POSIXct(\"2018-05-02\")   # timestamp with data in example  # read archive by specifying start time avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60L,                       start = start_time,                       end = end_time) names(avg_60) #> [1] \"timestamp\" \"user\"      \"sys\"       \"nice\"      \"idle\"      \"wait\"      #> [7] \"irq\"       \"softirq\"   \"stolen\"    head(avg_60) #> # A tibble: 6 × 9 #>   timestamp              user      sys  nice  idle  wait   irq softirq   stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #> 1 2018-05-01 00:01:00 0.00458 0.00201      0 0.992     0     0       0 0.00144  #> 2 2018-05-01 00:02:00 0.00258 0.000570     0 0.996     0     0       0 0.000570 #> 3 2018-05-01 00:03:00 0.00633 0.00144      0 0.992     0     0       0 0        #> 4 2018-05-01 00:04:00 0.00515 0.00201      0 0.991     0     0       0 0.00144  #> 5 2018-05-01 00:05:00 0.00402 0.000569     0 0.995     0     0       0 0.000569 #> 6 2018-05-01 00:06:00 0.00689 0.00144      0 0.992     0     0       0 0        tail(avg_60) #> # A tibble: 6 × 9 #>   timestamp              user      sys  nice  idle  wait   irq softirq stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> #> 1 2018-05-01 23:55:00 0.00546 0.00201      0 0.993     0     0       0      0 #> 2 2018-05-01 23:56:00 0.00458 0.00201      0 0.993     0     0       0      0 #> 3 2018-05-01 23:57:00 0.00258 0.000568     0 0.997     0     0       0      0 #> 4 2018-05-01 23:58:00 0.00633 0            0 0.994     0     0       0      0 #> 5 2018-05-01 23:59:00 0.00802 0.00144      0 0.991     0     0       0      0 #> 6 2018-05-02 00:00:00 0.00515 0.00345      0 0.991     0     0       0      0  # read archive by specifying number of rows to retrieve avg_60 <- read_rra(rrd_cpu_0, cf = \"AVERAGE\", step = 60L,                     n_steps = 5,                     end = end_time) names(avg_60) #> [1] \"timestamp\" \"user\"      \"sys\"       \"nice\"      \"idle\"      \"wait\"      #> [7] \"irq\"       \"softirq\"   \"stolen\"    avg_60 #> # A tibble: 5 × 9 #>   timestamp              user      sys  nice  idle  wait   irq softirq stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> #> 1 2018-05-01 23:56:00 0.00458 0.00201      0 0.993     0     0       0      0 #> 2 2018-05-01 23:57:00 0.00258 0.000568     0 0.997     0     0       0      0 #> 3 2018-05-01 23:58:00 0.00633 0            0 0.994     0     0       0      0 #> 4 2018-05-01 23:59:00 0.00802 0.00144      0 0.991     0     0       0      0 #> 5 2018-05-02 00:00:00 0.00515 0.00345      0 0.991     0     0       0      0"},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports data from an RRD database — read_rrd","title":"Imports data from an RRD database — read_rrd","text":"Reads metadata RRD adjusts parameters accordingly order expose RRAs entirety.","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports data from an RRD database — read_rrd","text":"","code":"read_rrd(filename)"},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports data from an RRD database — read_rrd","text":"filename File name","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imports data from an RRD database — read_rrd","text":"Returns named list data.frames. data frame corresponds RRA (see read_rra()).  list names constructed \"consolidation function\" + \"step\" - e.g. \"AVERAGE15\".","code":""},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Imports data from an RRD database — read_rrd","text":"https://oss.oetiker.ch/rrdtool/doc/rrdfetch.en.html","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/read_rrd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports data from an RRD database — read_rrd","text":"","code":"rrd_cpu_0 <- system.file(\"extdata/cpu-0.rrd\", package = \"rrd\")  describe_rrd(rrd_cpu_0) #> An RRD file with 10 RRA arrays and step size 60 #> [1] AVERAGE_60 (43200 rows) #> [2] AVERAGE_300 (25920 rows) #> [3] MIN_300 (25920 rows) #> [4] MAX_300 (25920 rows) #> [5] AVERAGE_3600 (8760 rows) #> [6] MIN_3600 (8760 rows) #> [7] MAX_3600 (8760 rows) #> [8] AVERAGE_86400 (1825 rows) #> [9] MIN_86400 (1825 rows) #> [10] MAX_86400 (1825 rows)  cpu <- read_rrd(rrd_cpu_0) names(cpu) #>  [1] \"AVERAGE60\"    \"AVERAGE300\"   \"MIN300\"       \"MAX300\"       \"AVERAGE3600\"  #>  [6] \"MIN3600\"      \"MAX3600\"      \"AVERAGE86400\" \"MIN86400\"     \"MAX86400\"     head(cpu[[1]]) #> # A tibble: 6 × 9 #>   timestamp              user     sys  nice  idle  wait   irq softirq   stolen #>   <dttm>                <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>    <dbl> #> 1 2018-04-02 12:24:00 0.0104  0.00811     0 0.981     0     0       0 0.000137 #> 2 2018-04-02 12:25:00 0.0126  0.00630     0 0.979     0     0       0 0.00192  #> 3 2018-04-02 12:26:00 0.0159  0.00808     0 0.976     0     0       0 0        #> 4 2018-04-02 12:27:00 0.00853 0.00647     0 0.985     0     0       0 0        #> 5 2018-04-02 12:28:00 0.0122  0.00999     0 0.978     0     0       0 0        #> 6 2018-04-02 12:29:00 0.0106  0.00604     0 0.983     0     0       0 0        tail(cpu[[1]]) #> # A tibble: 6 × 9 #>   timestamp              user      sys  nice  idle    wait   irq softirq  stolen #>   <dttm>                <dbl>    <dbl> <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl> #> 1 2018-05-02 12:17:00 0.00545 0.00144      0 0.992 1.44e-3     0       0 0       #> 2 2018-05-02 12:18:00 0.00602 0.00201      0 0.991 5.69e-4     0       0 0       #> 3 2018-05-02 12:19:00 0.00889 0.000569     0 0.991 0           0       0 0       #> 4 2018-05-02 12:20:00 0.00715 0            0 0.991 0           0       0 1.44e-3 #> 5 2018-05-02 12:21:00 0.00602 0.00144      0 0.992 0           0       0 5.68e-4 #> 6 2018-05-02 12:22:00 0.00171 0.000569     0 0.998 0           0       0 0        tail(   cpu$AVERAGE60$sys ) #> [1] 0.0014390667 0.0020080000 0.0005689333 0.0000000000 0.0014390667 #> [6] 0.0005689333"},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Makes easy import data 'RRD' database (https://oss.oetiker.ch/rrdtool/) directly R data structures. resulting objects 'tibble' objects list 'tibble' objects, making easy manipulate data. package uses 'librrd' import numerical data 'RRD' database directly R data structures without using intermediate formats.","code":""},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Exposes following functions: describe_rrd() enumerate archives included RRD file. read_rrd() read entire RRD file, including archives read_rra() extract single RRA (round robin archive) RRD file information RRdtool RRD format please refer official RRDtool documentation tutorials. can also read -depth description package R Views blog post Reading analyzing log files RRD database format.","code":""},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"package-history","dir":"Reference","previous_headings":"","what":"Package history","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Plamen Dimitrov wrote original proof concept package Google Summer Code 2014 project wrote accompanying blog post \"R Package Working RRD Files\". Andrie de Vries became maintainer package early 2018, prepared package release CRAN adding documentation, examples unit tests. time API changed resulting objects tibble objects, making easier analyze data using tidyverse concepts.  time also published \"R Views\" blog post.","code":""},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"https://oss.oetiker.ch/rrdtool/doc/index.en.html","code":""},{"path":[]},{"path":"https://andrie.github.io/rrd/reference/rrd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rrd: Import Data from a RRD (Round Robin Database) File — rrd-package","text":"Maintainer: Andrie de Vries apdevries@gmail.com [copyright holder] Authors: Plamen Dimitrov dim.plamen@gmail.com [copyright holder] contributors: Tobias Oettiker (rrdtool rrd library, https://oss.oetiker.ch/rrdtool/) [copyright holder]","code":""}]
